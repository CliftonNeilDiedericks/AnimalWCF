//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AnimalSoundApp.AnimalEngineService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Animal", Namespace="http://schemas.datacontract.org/2004/07/AnimalDataContracts.Animal")]
    [System.SerializableAttribute()]
    public partial class Animal : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int AnimalTypeIDField;
        
        private int IDField;
        
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int AnimalTypeID {
            get {
                return this.AnimalTypeIDField;
            }
            set {
                if ((this.AnimalTypeIDField.Equals(value) != true)) {
                    this.AnimalTypeIDField = value;
                    this.RaisePropertyChanged("AnimalTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AnimalType", Namespace="http://schemas.datacontract.org/2004/07/AnimalDataContracts.Animal")]
    [System.SerializableAttribute()]
    public partial class AnimalType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClassNameField;
        
        private int IDField;
        
        private string TypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClassName {
            get {
                return this.ClassNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassNameField, value) != true)) {
                    this.ClassNameField = value;
                    this.RaisePropertyChanged("ClassName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AnimalEngineService.IAnimalEngineService")]
    public interface IAnimalEngineService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/GetAllAnimals", ReplyAction="http://tempuri.org/IAnimalEngineService/GetAllAnimalsResponse")]
        System.Collections.Generic.List<AnimalSoundApp.AnimalEngineService.Animal> GetAllAnimals();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/GetAllAnimals", ReplyAction="http://tempuri.org/IAnimalEngineService/GetAllAnimalsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<AnimalSoundApp.AnimalEngineService.Animal>> GetAllAnimalsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/GetAnimalByID", ReplyAction="http://tempuri.org/IAnimalEngineService/GetAnimalByIDResponse")]
        AnimalSoundApp.AnimalEngineService.Animal GetAnimalByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/GetAnimalByID", ReplyAction="http://tempuri.org/IAnimalEngineService/GetAnimalByIDResponse")]
        System.Threading.Tasks.Task<AnimalSoundApp.AnimalEngineService.Animal> GetAnimalByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/InsertAnimal", ReplyAction="http://tempuri.org/IAnimalEngineService/InsertAnimalResponse")]
        AnimalSoundApp.AnimalEngineService.Animal InsertAnimal(AnimalSoundApp.AnimalEngineService.Animal request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/InsertAnimal", ReplyAction="http://tempuri.org/IAnimalEngineService/InsertAnimalResponse")]
        System.Threading.Tasks.Task<AnimalSoundApp.AnimalEngineService.Animal> InsertAnimalAsync(AnimalSoundApp.AnimalEngineService.Animal request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/UpdateAnimal", ReplyAction="http://tempuri.org/IAnimalEngineService/UpdateAnimalResponse")]
        bool UpdateAnimal(AnimalSoundApp.AnimalEngineService.Animal request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/UpdateAnimal", ReplyAction="http://tempuri.org/IAnimalEngineService/UpdateAnimalResponse")]
        System.Threading.Tasks.Task<bool> UpdateAnimalAsync(AnimalSoundApp.AnimalEngineService.Animal request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/DeleteAnimal", ReplyAction="http://tempuri.org/IAnimalEngineService/DeleteAnimalResponse")]
        bool DeleteAnimal(AnimalSoundApp.AnimalEngineService.Animal request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/DeleteAnimal", ReplyAction="http://tempuri.org/IAnimalEngineService/DeleteAnimalResponse")]
        System.Threading.Tasks.Task<bool> DeleteAnimalAsync(AnimalSoundApp.AnimalEngineService.Animal request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/GetAllAnimalTypes", ReplyAction="http://tempuri.org/IAnimalEngineService/GetAllAnimalTypesResponse")]
        System.Collections.Generic.List<AnimalSoundApp.AnimalEngineService.AnimalType> GetAllAnimalTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/GetAllAnimalTypes", ReplyAction="http://tempuri.org/IAnimalEngineService/GetAllAnimalTypesResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<AnimalSoundApp.AnimalEngineService.AnimalType>> GetAllAnimalTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/GetAnimalTypeByID", ReplyAction="http://tempuri.org/IAnimalEngineService/GetAnimalTypeByIDResponse")]
        AnimalSoundApp.AnimalEngineService.AnimalType GetAnimalTypeByID(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/GetAnimalTypeByID", ReplyAction="http://tempuri.org/IAnimalEngineService/GetAnimalTypeByIDResponse")]
        System.Threading.Tasks.Task<AnimalSoundApp.AnimalEngineService.AnimalType> GetAnimalTypeByIDAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/InsertAnimalType", ReplyAction="http://tempuri.org/IAnimalEngineService/InsertAnimalTypeResponse")]
        AnimalSoundApp.AnimalEngineService.AnimalType InsertAnimalType(AnimalSoundApp.AnimalEngineService.AnimalType request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/InsertAnimalType", ReplyAction="http://tempuri.org/IAnimalEngineService/InsertAnimalTypeResponse")]
        System.Threading.Tasks.Task<AnimalSoundApp.AnimalEngineService.AnimalType> InsertAnimalTypeAsync(AnimalSoundApp.AnimalEngineService.AnimalType request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/UpdateAnimalType", ReplyAction="http://tempuri.org/IAnimalEngineService/UpdateAnimalTypeResponse")]
        bool UpdateAnimalType(AnimalSoundApp.AnimalEngineService.AnimalType request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/UpdateAnimalType", ReplyAction="http://tempuri.org/IAnimalEngineService/UpdateAnimalTypeResponse")]
        System.Threading.Tasks.Task<bool> UpdateAnimalTypeAsync(AnimalSoundApp.AnimalEngineService.AnimalType request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/DeleteAnimalType", ReplyAction="http://tempuri.org/IAnimalEngineService/DeleteAnimalTypeResponse")]
        bool DeleteAnimalType(AnimalSoundApp.AnimalEngineService.AnimalType request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAnimalEngineService/DeleteAnimalType", ReplyAction="http://tempuri.org/IAnimalEngineService/DeleteAnimalTypeResponse")]
        System.Threading.Tasks.Task<bool> DeleteAnimalTypeAsync(AnimalSoundApp.AnimalEngineService.AnimalType request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAnimalEngineServiceChannel : AnimalSoundApp.AnimalEngineService.IAnimalEngineService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AnimalEngineServiceClient : System.ServiceModel.ClientBase<AnimalSoundApp.AnimalEngineService.IAnimalEngineService>, AnimalSoundApp.AnimalEngineService.IAnimalEngineService {
        
        public AnimalEngineServiceClient() {
        }
        
        public AnimalEngineServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AnimalEngineServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnimalEngineServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AnimalEngineServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<AnimalSoundApp.AnimalEngineService.Animal> GetAllAnimals() {
            return base.Channel.GetAllAnimals();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<AnimalSoundApp.AnimalEngineService.Animal>> GetAllAnimalsAsync() {
            return base.Channel.GetAllAnimalsAsync();
        }
        
        public AnimalSoundApp.AnimalEngineService.Animal GetAnimalByID(int ID) {
            return base.Channel.GetAnimalByID(ID);
        }
        
        public System.Threading.Tasks.Task<AnimalSoundApp.AnimalEngineService.Animal> GetAnimalByIDAsync(int ID) {
            return base.Channel.GetAnimalByIDAsync(ID);
        }
        
        public AnimalSoundApp.AnimalEngineService.Animal InsertAnimal(AnimalSoundApp.AnimalEngineService.Animal request) {
            return base.Channel.InsertAnimal(request);
        }
        
        public System.Threading.Tasks.Task<AnimalSoundApp.AnimalEngineService.Animal> InsertAnimalAsync(AnimalSoundApp.AnimalEngineService.Animal request) {
            return base.Channel.InsertAnimalAsync(request);
        }
        
        public bool UpdateAnimal(AnimalSoundApp.AnimalEngineService.Animal request) {
            return base.Channel.UpdateAnimal(request);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAnimalAsync(AnimalSoundApp.AnimalEngineService.Animal request) {
            return base.Channel.UpdateAnimalAsync(request);
        }
        
        public bool DeleteAnimal(AnimalSoundApp.AnimalEngineService.Animal request) {
            return base.Channel.DeleteAnimal(request);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAnimalAsync(AnimalSoundApp.AnimalEngineService.Animal request) {
            return base.Channel.DeleteAnimalAsync(request);
        }
        
        public System.Collections.Generic.List<AnimalSoundApp.AnimalEngineService.AnimalType> GetAllAnimalTypes() {
            return base.Channel.GetAllAnimalTypes();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<AnimalSoundApp.AnimalEngineService.AnimalType>> GetAllAnimalTypesAsync() {
            return base.Channel.GetAllAnimalTypesAsync();
        }
        
        public AnimalSoundApp.AnimalEngineService.AnimalType GetAnimalTypeByID(int ID) {
            return base.Channel.GetAnimalTypeByID(ID);
        }
        
        public System.Threading.Tasks.Task<AnimalSoundApp.AnimalEngineService.AnimalType> GetAnimalTypeByIDAsync(int ID) {
            return base.Channel.GetAnimalTypeByIDAsync(ID);
        }
        
        public AnimalSoundApp.AnimalEngineService.AnimalType InsertAnimalType(AnimalSoundApp.AnimalEngineService.AnimalType request) {
            return base.Channel.InsertAnimalType(request);
        }
        
        public System.Threading.Tasks.Task<AnimalSoundApp.AnimalEngineService.AnimalType> InsertAnimalTypeAsync(AnimalSoundApp.AnimalEngineService.AnimalType request) {
            return base.Channel.InsertAnimalTypeAsync(request);
        }
        
        public bool UpdateAnimalType(AnimalSoundApp.AnimalEngineService.AnimalType request) {
            return base.Channel.UpdateAnimalType(request);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateAnimalTypeAsync(AnimalSoundApp.AnimalEngineService.AnimalType request) {
            return base.Channel.UpdateAnimalTypeAsync(request);
        }
        
        public bool DeleteAnimalType(AnimalSoundApp.AnimalEngineService.AnimalType request) {
            return base.Channel.DeleteAnimalType(request);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAnimalTypeAsync(AnimalSoundApp.AnimalEngineService.AnimalType request) {
            return base.Channel.DeleteAnimalTypeAsync(request);
        }
    }
}
